#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
CMB1 序列找数
知识点
数组、贪心、查找
描述  
从非负整数序列 0, 1, 2, ..., n中给出包含其中n个数的子序列，请找出未出现在该子序列中的那个数。
输入描述：
输入为n + 1个非负整数，用空格分开。
其中：首个数字为非负整数序列的最大值n，后面n个数字为子序列中包含的数字。
输出描述：
输出为1个数字，即未出现在子序列中的那个数。
int main()//大神算法
{
	int a;
	int b[10000];
	int i = 0, j = 0;
	scanf("%d", &a);
	for (i = 0;i < a;i++)
		scanf("%d", &b[i]);
	int min, temp;
	for (i = 0;i < a;i++)
	{
		min = b[i];
		for (j = i + 1;j < a;j++)
			if (b[j] < min)
			{
				temp = b[j];
				b[j] = min;
				min = temp;
			}
		b[i] = min;
	}
	for (i = 0;i < a;i++)
		if (b[i] != i)
		{
			printf("%d", i);break;
		}
}
int main()//简单算法
{
	int a;
	int b[1000];
	int i = 0, num = 0;
	scanf("%d", &a);
	for (i = 0;i < a;i++)
		scanf("%d", &b[i]);
	int sum1 = a * (a + 1) / 2, sum2 = 0;
	for (i = 0;i < a;i++)
		sum2 += b[i];
	num = sum1 - sum2;
	printf("%d", num);
	return 0;
}

BM63 跳台阶
知识点
递归、动态规划、记忆化搜索
描述
一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
数据范围：1≤n≤40
/**
 *
 * @param number int整型
 * @return int整型
 */
int jumpFloor(int number){
	// write code here
	int a = 1;//n-2阶跳法
	int b = 1;//n-1阶跳法
	int c = 0;//n阶
	if (number == 0 || number == 1) {
		return number;
	}
	for (int i = 2;i <= number;i++) {
		c = b + a;
		a = b;
		b = c;
	}
	return c;
}

BM60 括号生成
知识点
递归
描述
给出n对括号，请编写一个函数来生成所有的由n对括号组成的合法组合。
例如，给出n = 3，解集为：
"((()))", "(()())", "(())()", "()()()", "()(())"
数据范围：1≤n≤8
/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 *
 * @param n int整型
 * @return string字符串一维数组
 * @return int* returnSize 返回数组行数
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */
void generate(int n, int left, int right, int high, char *cache, int **ret, int* returnSize)
{
	if ((left + right) == 2 * n) {
		memcpy(ret[*returnSize], cache, (2 * n) * sizeof(char));
		ret[*returnSize][2 * n] = '\0';
		(*returnSize) += 1;
		return;
	}
	/* 左括号数量如果不够， 可以继续添加左括号 */
	if (left < n) {
		cache[high] = '(';
		generate(n, left + 1, right, high + 1, cache, ret, returnSize);
	}
	/* 右括号要小于左括号数量 */
	if (right < left) {
		cache[high] = ')';
		generate(n, left, right + 1, high + 1, cache, ret, returnSize);
	}
}
char** generateParenthesis(int n, int* returnSize) {
	 write code here
	int **ret = malloc(10000 * sizeof(char *));

	for (int i = 0; i < 10000; i++) {
		ret[i] = malloc((2 * n + 1) * sizeof(char));
	}
	*returnSize = 0;
	char cache[2 * n + 1];
	generate(n, 0, 0, 0, cache, ret, returnSize);

	return ret;
}

BM86 大数加法
知识点
字符串、模拟
描述
以字符串的形式读入两个数字，编写一个函数计算它们的和，以字符串形式返回。
数据范围：len(s),len(t)≤100000，字符串仅由'0'~'9'构成
要求：时间复杂度 O(n)
/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 * 计算两个数之和
 * @param s string字符串 表示第一个整数
 * @param t string字符串 表示第二个整数
 * @return string字符串
 */
char* solve(char* s, char* t) {
	// write code here
	int lens = strlen(s);
	int lent = strlen(t);
	int lenresult = (lens > lent ? lens : lent) + 2;
	int curresult = lenresult - 1;
	int temp, flag = 0;
	char* result = (char*)malloc(sizeof(char) * (lenresult));
	result[curresult] = 0;
	while (lens || lent) {
		temp = flag;
		if (lent) temp += t[--lent] - '0';
		if (lens) temp += s[--lens] - '0';
		flag = temp / 10;
		temp %= 10;
		result[--curresult] = temp + '0';
	}
	result[0] = flag + '0';
	return flag ? result : result + 1;
}
/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 * 计算两个数之和
 * @param s string字符串 表示第一个整数
 * @param t string字符串 表示第二个整数
 * @return string字符串
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */
char* solve(char* s, char* t) //大神算法
{
	// write code here
	int sLen = strlen(s);
	int tLen = strlen(t);
	int resultLen;

	if (sLen == 0)
		return t;
	if (tLen == 0)
		return s;
	//2个数字相加，和的位数最多为较长数字位数+1，因为是字符串，预留一个'\0'的位置，所有+2
	if (sLen > tLen)
		resultLen = sLen + 2;
	else
		resultLen = tLen + 2;

	//char *result = (char *)malloc(sizeof(char)*resultLen);
	char *result = (char *)calloc(resultLen, sizeof(char));
	int sPos = sLen - 1;//求和从最后一位开始
	int tPos = tLen - 1;
	int resPos = 0;//记录和的字符串当前位置
	int carry = 0;//进位
	int sum = 0;//求和
	int i, j;//翻转字符串

	while (sPos >= 0 || tPos >= 0 || carry > 0)
	{
		//从后往前，取每位的数字,若较长数字位有效，但较短数字位无效，则较短数字位返回0
		int n1 = sPos >= 0 ? s[sPos--] - '0' : 0;
		int n2 = tPos >= 0 ? t[tPos--] - '0' : 0;
		sum = n1 + n2 + carry;
		if (sum >= 10)
		{
			carry = 1;
			result[resPos++] = sum % 10 + '0';
		}
		else
		{
			carry = 0;
			result[resPos++] = sum + '0';
		}
	}

	//s=1,t=99时，result=001，需原地翻转字符串为100
	for (i = 0, j = resPos - 1; i < j; i++, j--)
	{
		char tmp = result[i];
		result[i] = result[j];
		result[j] = tmp;
	}
	return result;
}

PDD1 最大乘积
知识点
模拟、贪心
描述
给定一个无序数组，包含正数、负数和0，要求从中找出3个数的乘积，使得乘积最大，要求时间复杂度：O(n)，空间复杂度：O(1)
输入描述：
输入共2行，第一行包括一个整数n，表示数组长度 第二行为n个以空格隔开的整数，分别为A1, A2, …, An
输出描述：
满足条件的最大乘积
/*C语言 找到最大的三个正数，最小的两个负数*/
int main()
{
	int length, i;
	scanf("%d", &length);
	long min1 = 1, min2 = 1;
	long max1 = 1, max2 = 1, max3 = 1;
	long value, max_product = -1;
	for (i = 0;i < length;i++)
	{
		scanf("%ld", &value);
		if (value > max1) { max3 = max2;max2 = max1;max1 = value; }
		else if (value > max2) { max3 = max2;max2 = value; }
		else if (value > max3)max3 = value;
		else if (value < min1) { min2 = min1;min1 = value; }
		else if (value < min2)min2 = value;
	}
	if (max2 + max3 > -min1 - min2)max_product = max1 * max2*max3;    else max_product = min1 * min2*max1;
	printf("%ld\n", max_product);
	return 0;
}

CMB2 小招喵跑步
知识点
动态规划
描述
小招喵喜欢在数轴上跑来跑去，假设它现在站在点n处，它只会3种走法，分别是：
1.数轴上向前走一步，即n = n + 1
2.数轴上向后走一步, 即n = n - 1
3.数轴上使劲跳跃到当前点的两倍，即n = 2 * n
现在小招喵在原点，即n = 0，它想去点x处，快帮小招喵算算最快的走法需要多少步？
输入描述：
小招喵想去的位置x
输出描述：
小招喵最少需要的步数
int main()
{
	int path, n;
	scanf("%d", &n);
	if (n < 0)
		n = -n;
	for (path = 0;n;path++)
	{
		if (n % 2 == 0)
			n /= 2;
		else if (n > 3 && ((n + 1) / 2) % 2 == 0)
			n++;
		else
			n--;
	}
	printf("%d", path);

	return 0;
}

PDD3 六一儿童节
知识点
贪心
描述
六一儿童节，老师带了很多好吃的巧克力到幼儿园。每块巧克力j的重量为w[j]，对于每个小朋友i，当他分到的
巧克力大小达到h[i](即w[j] >= h[i])，他才会上去表演节目。老师的目标是将巧克力分发给孩子们，使得最多
的小孩上台表演。可以保证每个w[i] > 0且不能将多块巧克力分给一个孩子或将一块分给多个孩子。
输入描述：
第一行：n，表示h数组元素个数
第二行：n个h数组元素
第三行：m，表示w数组元素个数
第四行：m个w数组元素
输出描述：
上台表演学生人数
int compar(const void* a, const void* b) 
{
	return *(int*)a - *(int*)b;
}

int main(const int argc, const char** const argv) {
	int i, j, n, m, ans = 0;
	fscanf(stdin, "%d", &n);

	int h[n];
	for (i = 0; i < n; ++i)
		fscanf(stdin, "%d", h + i);

	fscanf(stdin, "%d", &m);

	int w[m] = { 0 };
	for (i = 0; i < m; ++i)
		fscanf(stdin, "%d", w + i);

	qsort(w, m, sizeof(int), compar);
	qsort(h, n, sizeof(int), compar);

	i = 0, j = 0;
	while (i < m && j < n) {
		if (w[i] >= h[j]) ++ans, ++j;
		++i;
	}

	return fprintf(stdout, "%d", ans), 0;
}

BL1 扭蛋机
知识点
数学、递归
描述
22娘和33娘接到了小电视君的扭蛋任务：
一共有两台扭蛋机，编号分别为扭蛋机2号和扭蛋机3号，22娘使用扭蛋机2号，33娘使用扭蛋机3号。
扭蛋机都不需要投币，但有一项特殊能力：
扭蛋机2号：如果塞x（x范围为 >= 0整数）个扭蛋进去，然后就可以扭到2x + 1个
扭蛋机3号：如果塞x（x范围为 >= 0整数）个扭蛋进去，然后就可以扭到2x + 2个
22娘和33娘手中没有扭蛋，需要你帮她们设计一个方案，两人“轮流扭”（谁先开始不限，扭到的蛋可以交给
对方使用），用“最少”的次数，使她们能够最后恰好扭到N个交给小电视君。
输入描述：
输入一个正整数，表示小电视君需要的N个扭蛋。
输出描述：
输出一个字符串，每个字符表示扭蛋机，字符只能包含"2"和"3"。
int print(int n)
{
	if (n == 1)
	{
		printf("2");
		return 1;
	}
	else if (n == 2)
	{
		printf("3");
		return 1;
	}
	else if (n % 2)
	{
		print(n / 2);
		printf("2");
	}
	else
	{
		print(n / 2 - 1);
		printf("3");
	}
	return 1;
}
int main()//斐波那契数列问题  逆推法 递归
{
	int n;
	scanf("%d", &n);
	print(n);
}

MGJ1 搬圆桌
知识点
贪心
描述
现在有一张半径为r的圆桌，其中心位于(x, y)，现在他想把圆桌的中心移到(x1, y1)。每次移动一步，都必须在圆
桌边缘固定一个点然后将圆桌绕这个点旋转。问最少需要移动几步。
输入描述：
一行五个整数r, x, y, x1, y1(1≤r≤100000, -100000≤x, y, x1, y1≤100000)
输出描述：
输出一个整数，表示答案
#include <math.h>
int main()
{
	int r, x, y, x1, y1;
	while (scanf("%d%d%d%d%d", &r, &x, &y, &x1, &y1) != EOF)
	{
		double dis;
		r = r * 2;
		dis = sqrt(pow((y1 - y), 2) + pow((x1 - x), 2));
		int step = dis / r;
		if (r*step < dis)
			step++;
		printf("%d\n", step);
	}
	return 0;
}

ZJ1 附加题
知识点
动态规划、数组
描述
存在n + 1个房间，每个房间依次为房间1 2 3...i，每个房间都存在一个传送门，i房间的传送门可以把人传送到
房间pi(1 <= pi <= i), 现在路人甲从房间1开始出发(当前房间1即第一次访问)，每次移动他有两种移动策略：
A.如果访问过当前房间 i 偶数次，那么下一次移动到房间i + 1；
B.如果访问过当前房间 i 奇数次，那么移动到房间pi；
现在路人甲想知道移动到房间n + 1一共需要多少次移动；
输入描述：
第一行包括一个数字n(30 % 数据1 <= n <= 100，100%数据 1 <= n <= 1000)，表示房间的数量，接下来一行存在n
个数字 pi(1 <= pi <= i), pi表示从房间i可以传送到房间pi。
输出描述：
输出一行数字，表示最终移动的次数，最终结果需要对1000000007(10e9 + 7) 取模。
#include <stdio.h>
int step(int*a, int n)
{
	int dp[n + 1];
	memset(dp, 0, sizeof(dp));
	int mod = 10e9 + 7;
	for (int i = 1;i <= n;i++)
	{
		dp[i] = (2 * dp[i - 1] - dp[a[i - 1] - 1] + 2) % mod;
	}
	return dp[n];
}
int main()
{
	int n;
	scanf("%d", &n);
	int i, a[n];
	for (i = 0;i < n;i++)
	{
		scanf("%d", &a[i]);
	}
	int s = step(a, n);
	printf("%d", s);
	return 0;
}

MMT1 交叉线
知识点
排序、数学
描述
大M布置给小M一个题目：首先给出n个在横坐标上的点，然后连续的用半圆连接他们：首先连接第一个点与
第二点(以第一个点和第二点作为半圆的直径)。然后连接第二个第三个点，直到第n个点。现在需要判定这些
半圆是否相交了，在端点处相交不算半圆相交。如下图所示。
输入描述：
输入的第一行包含一个整数T(1 ≤ T ≤ 10)表示有T组样例。
每组样例的第一行是一个整数n(1≤n≤1000)。
接下来的一行输入有n个用空格隔开的不同的整数a1, a2, ..., an(-1000000 ≤ ai ≤ 1000000)，(ai, 0)表示第i个点在横坐标的位置。
输出描述：
对于每个输入文件，输出T行。
每行输出"y"表示这些半圆有相交或者"n"。

int get_fun(int a, int b, int x, int y)
{
	if (a > b) {
		a = a + b;
		b = a - b;
		a = a - b;
	}
	if (x > y) {
		x = x + y;
		y = x - y;
		x = x - y;
	}
	if (x > a&&x<b&&y>b || y > a&&y < b&&x < a) {
		// printf("%d\t%d\t\t%d\t%d\n",a,b,x,y);
		return 1;
	}
	else
	{
		return 0;
	}
}
int main()
{
	int i, j, n, res = 0, T;
	int *p = NULL;
	scanf("%d", &T);
	while (T--)
	{
		scanf("%d", &n);
		p = (int *)malloc(n * sizeof(int));
		for (i = 0;i < n;i++)
		{
			scanf("%d", p + i);
		}
		for (i = 0;i < n - 2;i++)
		{
			res = 0;
			for (j = i + 1;j < n - 1;j++)
			{
				res = get_fun(p[i], p[i + 1], p[j], p[j + 1]);
				if (res) {
					// printf("%d\t%d\t\t%d\t%d\n",p[i],p[i+1],p[j],p[j+1]);
					break;
				}
			}
			if (res)
				break;
		}
		if (res)
			printf("y\n");
		else
		{
			printf("n\n");
		}

	}

	free(p);
	p = NULL;
	return 0;
}

BD1 罪犯转移
知识点
动态规划
描述
C市现在要转移一批罪犯到D市，C市有n名罪犯，按照入狱时间有顺序，另外每个罪犯有一个罪行值，值越大
罪越重。现在为了方便管理，市长决定转移入狱时间连续的c名犯人，同时要求转移犯人的罪行值之和不超过
t，问有多少种选择的方式（一组测试用例可能包含多组数据，请注意处理）？
输入描述：
第一行数据三个整数 : n，t，c(1≤n≤2e5, 0≤t≤1e9, 1≤c≤n)，第二行按入狱时间给出每个犯人的罪行值ai(0≤ai≤1e9)
输出描述：
一行输出答案。
int main()
{
	int n, c, t, a;
	while (scanf("%d %d %d", &n, &t, &c) != EOF)
	{
		int count = 0;
		int arr[n];
		arr[0] = 0;
		for (int i = 1;i <= n;i++)
		{
			scanf("%d", &a);
			arr[i] = arr[i - 1] + a;
		}
		for (int i = n;i >= c;i--)
		{
			if (arr[i] - arr[i - c] <= t)
			{
				count = count + 1;
			}
		}
		printf("%d\n", count);
	}
	return 0;
}

QY1 循环数比较
知识点
字符串、数学、模拟、穷举
描述
对于任意两个正整数x和k, 我们定义repeat(x, k)为将x重复写k次形成的数, 例如repeat(1234, 3) = 
123412341234, repeat(20, 2) = 2020
牛牛现在给出4个整数x1, k1, x2, k2, 其中v1 = (x1, k1), v2 = (x2, k2), 请你来比较v1和v2的大小。
输入描述：
输入包括一行, 一行中有4个正整数x1, k1, x2, k2(1 ≤ x1, x2 ≤ 10 ^ 9, 1 ≤ k1, k2 ≤ 50), 以空格分割
输出描述：
如果v1小于v2输出"Less", v1等于v2输出"Equal", v1大于v2输出"Greater"
char repeat(char a[], int b)
{
	int i;
	char s1[500];
	strcpy(s1, a);
	for (i = 0;i < b - 1;i++)
		strcat(s1, a);
	return s1[500];
}
int main()//字符串元素比较
{
	int i, k1, k2;
	char x1[12], x2[12], num1[500], num2[500];
	scanf("%s %d %s %d\n", &x1, &k1, &x2, &k2);
	num1[500] = repeat(x1, k1);
	num2[500] = repeat(x2, k2);
	if (strlen(num1) < strlen(num2))
		printf("Less");
	else if (strlen(num1) == strlen(num2))
	{
		for (i = 0;i < strlen(num1);i++)
		{
			if (num1[i] < num2[i])
			{
				printf("Less");
				break;
			}
			else if (num1[i] > num2[i])
			{
				printf("Greater");
				break;
			}
		}
		if (i >= strlen(num1))
			printf("Equal");
	}
	else
		printf("Greater");
	return 0;
}

#include<stdio.h>
#define N 300
int repeat(int x, int k, int *v)
{
	int i, j = 0, m, t;
	while (x)
	{
		v[j++] = x % 10;
		x /= 10;
	}
	for (i = 0;i < j / 2;i++)
	{
		t = v[i];
		v[i] = v[j - 1 - i];
		v[j - 1 - i] = t;
	}
	for (i = 1;i < k;i++)
		for (m = 0;m < j;m++)
			v[m + i * j] = v[m];//暂时不知道为什么不能用v[j++]=v[m];
	return j * k;
}
int main()//数组剥离重组比较
{
	int i, a, b, k1, k2, x1, x2, v1[N], v2[N];
	scanf("%d %d %d %d", &x1, &k1, &x2, &k2);
	a = repeat(x1, k1, v1);
	b = repeat(x2, k2, v2);
	if (a < b)
		printf("Less");
	else if (a == b)
	{
		for (i = 0;i < a;i++)
		{
			if (v1[i] < v2[i])
			{
				printf("Less");
				break;
			}
			else if (v1[i] > v2[i])
			{
				printf("Greater");
				break;
			}
		}
		if (i >= a)
			printf("Equal");
	}
	else
		printf("Greater");
}

int judge(char a[], int v1, char b[], int v2)
{
	int i;
	char s1[500], s2[500];
	strcpy(s1, a);
	strcpy(s2, b);
	for (i = 0;i < v1 - 1;i++)    strcat(s1, a);
	for (i = 0;i < v2 - 1;i++)    strcat(s2, b);
	if (strlen(s1) > strlen(s2))    return 1;
	if (strlen(s1) < strlen(s2))    return 2;
	for (i = 0;i < v1;i++)
	{
		if (s1[i] > s2[i])    return 1;
		if (s1[i] < s2[i])    return 2;
	}
	return 0;

}
int main()//字符复制比较 选择结构输出
{
	int v1, v2, r;
	char x1[12], x2[12];
	scanf("%s%d%s%d", &x1, &v1, &x2, &v2);
	r = judge(x1, v1, x2, v2);
	switch (r)
	{
	case 0:printf("Equal"); break;
	case 1:printf("Greater");break;
	case 2:printf("Less");break;
	}
	return 0;
}

PDD2 大整数相乘
知识点
模拟、数学
描述
有两个用字符串表示的非常大的大整数, 算出他们的乘积，也是用字符串表示。不能用系统自带的大整数类型。
输入描述：
空格分隔的两个字符串，代表输入的两个大整数
输出描述：
输入的乘积，用字符串表示
void big_data_multi(char *pstr1, char *pstr2)
{
	int i, j;
	int length_str1 = strlen(pstr1);
	int length_str2 = strlen(pstr2);
	int *pstr3 = (int*)malloc(sizeof(int)*(length_str1 + length_str2));
	char *pstr4 = (char*)malloc(sizeof(char)*(length_str1 + length_str2 + 1));
	memset(pstr3, 0, sizeof(int)*(length_str1 + length_str2));//一定要初始化，否则乱码
	for (i = 0; i < length_str2; i++)//循环累乘相加
	{
		for (j = 0; j < length_str1; j++)
		{
			pstr3[i + j + 1] += (pstr1[j] - '0') * (pstr2[i] - '0');
		}
	}
	for (i = length_str1 + length_str2 - 1; i >= 0; i--)
	{
		if (pstr3[i] >= 10)
		{
			pstr3[i - 1] += pstr3[i] / 10;
			pstr3[i] = pstr3[i] % 10;
		}
	}
	i = 0;
	while (pstr3[i] == 0)
	{
		i++;
	}
	j = 0;
	for (; j < length_str1 + length_str2 && i < length_str1 + length_str2; j++, i++)
	{
		pstr4[j] = pstr3[i] + '0';
	}
	pstr4[j] = '\0';

	printf("%s", pstr4);
	free(pstr3);
	free(pstr4);
}
int main()
{
	char str1[100] = { 0 }, str2[100] = { 0 };
	scanf("%s%s", str1, str2);
	big_data_multi(str1, str2);
}

BL2 小A最多会新认识的多少人
知识点
图
描述
小A参加了一个n人的活动，每个人都有一个唯一编号i(i >= 0 & i < n)，其中m对相互认识，在活动中两个人可以
通过互相都认识的一个人介绍认识。现在问活动结束后，小A最多会认识多少人？
输入描述：
第一行聚会的人数：n（n >= 3 & n < 10000）；
第二行小A的编号 : ai（ai >= 0 & ai < n)；
第三互相认识的数目 : m（m >= 1 & m< n(n - 1) / 2）；
第4到m + 3行为互相认识的对，以','分割的编号。
输出描述：
输出小A最多会新认识的多少人？
int find(int *f, int a)
{
	int son, tmp;
	son = a;
	while (a != f[a])
		a = f[a];
	while (son != a)
	{
		tmp = f[son];
		f[son] = a;
		son = tmp;
	}
	return a;
}

int main(void)
{
	int N, my, M;
	scanf("%d", &N);
	scanf("%d", &my);
	scanf("%d", &M);
	int i, m, n, count, *f = (int*)malloc(sizeof(int)*N);
	for (i = 0; i < N; i++)
		f[i] = i;
	for (i = 0, count = -1; i < M; i++)
	{
		scanf("%d,%d", &m, &n);
		if (m == my || n == my)
			count--;
		m = find(f, m);
		n = find(f, n);
		if (m != n)
			f[m] = n;
	}
	int root = find(f, my);
	for (i = 0; i < N; i++)
		if (find(f, i) == root)
			count++;
	printf("%d", count);

	return 0;
}

SG2 矩阵元素相乘
知识点
动态规划
描述
A[n, m]是一个n行m列的矩阵，a[i, j]表示A的第i行j列的元素，定义x[i, j]为A的第i行和第j列除了a[i, j]之外所有元素(共n + m - 2个)的乘积，
即x[i, j] = a[i, 1] * a[i, 2] * ...*a[i, j - 1] * ...*a[i, m] * a[1, j] * a[2, j]...*a[i - 1, j] * a[i + 1, j]...*a[n, j], 现输入非
负整形的矩阵A[n, m]，求MAX(x[i, j])，即所有的x[i, j]中的最大值。
输入描述：
第一行两个整数n和m。之后n行输入矩阵，均为非负整数。
输出描述：
一行输出答案。
#include <stdio.h>
#include <limits.h>
int main()
{
	int n, m;
	while (scanf("%d %d", &n, &m) != EOF)
	{
		int arr[n][m];
		int max = INT_MIN;
		for (int i = 0;i < n;i++)
			for (int j = 0;j < m;j++)
				scanf("%d", &arr[i][j]);
		for (int i = 0;i < n;i++)
		{
			for (int j = 0;j < m;j++)
			{
				int sum = 1;
				for (int k = 0;k < n;k++)
					if (k != i)
						sum = sum * arr[k][j];
				for (int k = 0;k < m;k++)
					if (k != j)
						sum *= arr[i][k];
				if (sum > max)
					max = sum;
			}
		}
		printf("%d", max);
	}
	return 0;
}

CMB3 不想出差的HR
知识点
贪心、模拟、数学
描述
按照卡中心校园招聘的要求，HR小招和小商需要从三个科室中（分别为A、B、C）抽派面试官去往不同城市。
两名HR按照以下规定轮流从任一科室选择面试官：每次至少选择一位，至多选择该科室剩余面试官数。最先选不到面试官的HR需要自己出差。
假设HR小招和小商都不想出差且每次选择都采取最优策略，如果是小招先选，写一个函数来判断她是否需要出差。如果不需要出差，请给出第
一步的最优策略。
输入描述：
输入为三个正整数，分别代表三个科室的面试官人数，用英文逗号分隔
输出描述：
若小招需要出差，则输出：1；
若小招不需要出差，则输出：第一步选择的科室名称和选择人数，用英文逗号分隔
int main()
{
	unsigned int A, B, C, x;
	scanf("%d,%d,%d", &A, &B, &C);
	x = A ^ B^C;
	if (x == 0)
		printf("1\n");
	else
	{
		if ((A^B) < C)
			printf("C,%u\n", C - (A^B));
		else if ((A^C) < B)
			printf("B,%u\n", B - (A^C));
		else if ((B^C) < A)
			printf("A,%u\n", A - (B^C));
	}
}

MGJ2 最大间隔
知识点
贪心
描述
给定一个递增序列，a1 < a2 < ... < an 。定义这个序列的最大间隔为d = max{ ai + 1 - ai }(1≤i < n), 现在要从a2, a3 ..an - 1 
中删除一个元素。问剩余序列的最大间隔最小是多少？
输入描述：
第一行，一个正整数n(1 <= n <= 100), 序列长度;接下来n个小于1000的正整数，表示一个递增序列。
输出描述：
输出答案。
示例1
输入：5
      1 2 3 7 8
输出：4
int main()
{
	int i, n, arr[101], b[100];
	while (scanf("%d", &n) != EOF)
	{
		int j = 0;int max[100];int c;
		for (int i = 0;i < n;i++)
			scanf("%d", &arr[i]);
		for (int i = 1;i < n;i++)
			b[j++] = arr[i] - arr[i - 1];
		int t = b[0];
		for (i = 1;i < j;i++)
		{
			t = b[i] > t ? b[i] : t;
		}
		for (i = 1;i < j;i++)
		{
			if ((b[i - 1] + b[i]) > t)
				max[i - 1] = b[i - 1] + b[i];
			else
				max[i - 1] = t;
		}
		for (i = 0;i < j - 2;i++)
			c = max[i] < max[i + 1] ? max[i] : max[i + 1];
		t = c < t ? c : t;
		printf("%d\n", t);
	}
	return 0;
}

WY1 奖学金
知识点
动态规划、模拟
描述
小v今年有n门课，每门都有考试，为了拿到奖学金，小v必须让自己的平均成绩至少为avg。每门课由平时成绩和考试成绩组成，满分为r。
在考试前，小v他已经知道每门课的平时成绩为ai ，假设付出的时间与获得的分数成正比，若想让这门课的考试成绩多拿一分的话，小v
要花bi 的时间复习，不复习的话当然就是0分。同时我们显然可以发现复习得再多也不会拿到超过满分的分数。问小v为了拿到奖学金，
至少要花多少时间复习？
输入描述：
第一行三个整数n, r, avg（1 <= n <= 105，1 <= r <= 109，1 <= avg <= 106），接下来n行，每行两个整数ai和bi，（0 <= ai <= 106，1 <= bi <= 106）
注意：本题含有多组样例输入。
输出描述：
每个用例对应一行输出答案。
#include <stdio.h>
void my_sort(int *A, int *B, int left, int right)
{
	if (left < right) {
		int record_A = A[left], record_B = B[left], i = left, j = right;
		while (i < j)
		{
			while (i < j && B[j] >= record_B)
				--j;
			B[i] = B[j], A[i] = A[j];
			while (i < j && B[i] <= record_B)
				++i;
			B[j] = B[i], A[j] = A[i];
		}
		B[i] = record_B, A[i] = record_A;
		my_sort(A, B, left, i - 1);
		my_sort(A, B, i + 1, right);
	}
}
int main()
{
	int n, r, avg;
	while (scanf("%d %d %d", &n, &r, &avg) != EOF)
	{
		long long cnt = 0, rest = (long long)n*avg;   int A[n], B[n];
		for (int i = 0, A_val; i < n; ++i)
		{
			scanf("%d %d", &A_val, B + i);
			A[i] = r - A_val;
			rest -= A_val;
		}
		if (rest > 0)
		{
			my_sort(A, B, 0, n - 1);
			int i = 0;
			while (i<n && rest>A[i])
			{
				cnt += (long long)A[i] * B[i];
				rest -= A[i];
				i++;
			}
			printf("%lld\n", i < n ? cnt + rest * B[i] : cnt);
		}
		else
			printf("0\n");
	}
        return 0;
}

DD1 连续最大和
知识点
动态规划、贪心
描述
一个数组有 N 个元素，求连续子数组的最大和。 例如：[-1, 2, 1]，和最大的连续子数组为[2, 1]，其和为 3
输入描述：
输入为两行。 第一行一个整数n(1 <= n <= 100000)，表示一共有n个元素 第二行为n个数，即每个元素, 每个整数都在32位int范围内。以空格分隔。
输出描述：
所有连续子数组中和最大的值。
int main()//需用动态存储 while循环或malloc存储数组arr
{
	int i, n;
	scanf("%d", &n);
	if ((n < 1) || (n > 100000))
	{
		printf("please scan number between 1-100000\n");
		return 0;
	}
	int *arr = malloc(sizeof(int)*n);
	if (arr == NULL)
	{
		printf("malloc memary failed\n");
		return 0;
	}
	for (i = 0;i < n;i++)
	{
		scanf("%d", &arr[i]);
	}
	int sum = arr[0];
	int max = arr[0];
	for (int j = 1; j < n; j++)
	{
		if (sum < 0)
			sum = arr[j];
		else
			sum += arr[j];
		if (sum > max)
			max = sum;
	}
	printf("%d", max);
	return 0;
}

#include <stdio.h>
#include <limits.h>
int main()//常用解
{
	int N;
	while (scanf("%d", &N) != EOF)
	{
		int arr[N];
		int index = 0;
		while (index < N)
		{
			scanf("%d", &arr[index++]);
		}
		int sum = 0, max = INT_MIN;
		for (index = 0;index < N;index++)
		{
			sum += arr[index];
			if (sum > max)
				max = sum;
			if (sum < 0)
				sum = 0;
		}
		printf("%d\n", max);
	}
	return 0;
}

MT1 最大差值
知识点
贪心、动态规划、模拟
描述
有一个长为 n 的数组 A ，求满足 0 ≤ a ≤ b < n 的 A[b] - A[a] 的最大值。
给定数组 A 及它的大小 n ，请返回最大差值。
数据范围：2 < n≤2∗10^5，数组中的值满足0≤|val|≤5∗10^8
示例1
输入：
[5, 1], 2
返回值：0
示例2
输入：
[5, 6], 2
返回值：1
//* @param A int整型一维数组
//* @param ALen int A数组长度
//* @param n int整型
//* @return int整型
//*
//* C语言声明定义全局变量请加上static，防止重复定义
//* /
int getDis(int* A, int ALen, int n) {
	// write code here
	int max = 0, min = A[0];
	for (int i = 0;i < n;i++)
	{
		if (min > A[i])
			min = A[i];
		if (max < A[i] - min)
			max = A[i] - min;
	}
	return max;
}

语法
描述
牛牛正在寄快递，他了解到快递在 1kg 以内的按起步价 20 元计算，超出部分按每 kg 1元计算，不足 1kg 部分
按 1kg计算。如果加急的话要额外付五元，请问牛牛总共要支付多少快递费
输入描述：
第一行输入一个单精度浮点数 a 和一个字符 b ，a 表示牛牛要寄的快递的重量，b表示牛牛是否选择加急，'y' 
表示加急 ，'n' 表示不加急。
输出描述：
输出牛牛总共要支付的快递费用
#include <stdio.h>
int main()
{
	int m = 0;
	float a;
	char b;
	scanf("%f %c", &a, &b);
	if (a <= 1)
	{
		if (b == 'y')
			m = 5;
	}
	else
	{
		if (b == 'y')
		{
			m = a - 1;
			if (a - m > 1)
				m += 1;
			m += 5;
		}
		else
		{
			m = a - 1;
			if (a - m > 1)
				m += 1;
			m = m;
		}
	}
	printf("%d", m + 20);
	return 0;
}

描述
牛牛从键盘输入一个整数，请你判断这个整数能被 2 3 7 中哪几个数整除，并按升序输出。如果不能被 2 3 7 任意一个数整除则输出 n。
输入描述：
输出一个整数
输出描述：
输出能被 2 3 7 哪几个数整除，并按升序输出。
int main()
{
	int n = 0;
	int arr[] = { 2,3,7 };
	int i = 0;
	int count = 0;
	scanf("%d", &n);
	for (i = 0; i < 3; i++)
	{
		if (n % arr[i] == 0)
		{
			printf("%d ", arr[i]);
			count++;
		}
	}
	if (count == 0)
		printf("n");
	return 0;
}

描述
一群孩子做游戏，现在请你根据游戏得分来发糖果，要求如下：
1. 每个孩子不管得分多少，起码分到一个糖果。
2. 任意两个相邻的孩子之间，得分较多的孩子必须拿多一些糖果。(若相同则无此限制)
给定一个数组 arrarr 代表得分数组，请返回最少需要多少糖果。
要求 : 时间复杂度为 O(n) 空间复杂度为 O(n)
数据范围：1≤n≤100000 ,1≤ai≤1000
///**
// * pick candy
// * @param arr int整型一维数组 the array
// * @param arrLen int arr数组长度
// * @return int整型
// *
// * C语言声明定义全局变量请加上static，防止重复定义
// */
int candy(int* arr, int arrLen) 
{
	// write code here
	int up = 0, down = 0, peak = 1, res = 1;
	for (int i = 1; i < arrLen; i++)
	{
		res++;
		if (arr[i] > arr[i - 1]) {
			up++;
			res += up;
			down = 0;
			peak = up + 1;
		}
		else if (arr[i] == arr[i - 1]) {
			up = 0;
			down = 0;
			peak = 1;
		}
		else {
			up = 0;
			res += down;
			down++;
			if (down >= peak)
				res++;
		}
	}
	return res;
}

union package {
	char head;
	int  body;
};
struct message {
	char id;
	int  crc;
	union package pack;
};

int main() {
	printf("size=%d\n", sizeof(struct message));//12
	return 0;
}

int main()
{
	int a[] = { 1, 2, 3, 4, 5 };
	int*p[] = { a, a + 1, a + 2, a + 3 };
	int **q = p;
	printf("%d", *(p[0] + 1) + **(q + 2));//5
	//= *(p[0] + 1) + **(q + 2)
	//	*(p[0] + 1) + *(p[2])
	//	*(a + 1) + *(a + 2)
	//	a[1] + a[2]
	//	2 + 3
	//	5
	return 0;
}

描述
一个数组A中存有 n 个整数，在不允许使用另外数组的前提下，将每个整数循环向右移 M（ M >= 0）个位置，
即将A中的数据由（A0 A1 ……AN - 1 ）变换为（AN - M …… AN - 1 A0 A1 ……AN - M - 1 ）（最后 M 个
数循环移至最前面的 M 个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？
数据范围：0 <n≤100，0≤m≤1000
进阶：空间复杂度 O(1)O(1)，时间复杂度 O(n)O(n)
/**
 * 旋转数组
 * @param n int整型 数组长度
 * @param m int整型 右移距离
 * @param a int整型一维数组 给定数组
 * @param aLen int a数组长度
 * @return int整型一维数组
 * @return int* returnSize 返回数组行数
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */
int* solve(int n, int m, int* a, int aLen, int* returnSize) //使用额外数组(不可直接定义数组，需使用动态内存)
{
	int *b = (int *)malloc(sizeof(int) * n);
	for (int i = 0; i < n; i++)
	{
		b[(i + m) % n] = a[i];
	}
	*returnSize = n;
	return b;
}

void reverse(int* a, int start, int end) //数组翻转
{
	while (start < end)
	{
		int temp = a[start];
		a[start] = a[end];
		a[end] = temp;
		start++;
		end--;
	}
}
int* solve(int n, int m, int* a, int aLen, int* returnSize) {
	int k = m % n;
	reverse(a, 0, n - 1);
	reverse(a, 0, k - 1);
	reverse(a, k, n - 1);
	*returnSize = n;
	return a;
}

void reverse(int* a, int start, int end)
{
	while (start < end)
	{
		int temp = a[start];
		a[start] = a[end];
		a[end] = temp;
		start++;
		end--;
	}
}
int main()//vs调试版
{
	int n = 6;
	int m = 2;
	int a[6],b[6];
	for (int i = 0;i < n;i++)
		scanf("%d", &a[i]);
	int k = m % n;//数组翻转
	reverse(a, 0, n - 1);
	reverse(a, 0, k - 1);
	reverse(a, k, n - 1);
	for (int i = 0;i < n;i++)
		printf("%d ", a[i]);
	//for (int i = 0; i < n; ++i)//使用额外数组
	//{
	//	// 数组元素旋转
	//	b[(i + m) % n] = a[i];
	//}
	//for (int i = 0;i < n;i++)
	//	printf("%d ", b[i]);
	return 0;
}

有序线性表的合并操作
Description
给定两个非递减排列的线性表，将其合并成为一个非递减排列的线性表。
Input
输入数据包括4行：
第一行是正整数N1(1 <= N1 <= 100000)，表示第一个线性表的长度。
第二行是N1个整数，表示第一个线性表的所有元素。
第三行是正整数N2(1 <= N2 <= 100000)，表示第二个线性表的长度。
第四行是N2个整数，表示第二个线性表的所有元素。
Output
输出合并之后的线性表，各元素之间以一个空格分开。
Sample Input 1
3
1 3 5
3
2 4 6
Sample Output 1
1 2 3 4 5 6
#include <stdio.h>
#include <stdlib.h>
typedef int Status;

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2

#define LIST_INIT_SIZE 200000
#define LIST_SIZE_INCREMENT 10

typedef int ElemType;

typedef struct SqList {
	ElemType *elem;
	int length, capacity;
} SqList;
Status InitList(SqList *L) {
	if (L == NULL) {
		return ERROR;
	}

	L->elem = (ElemType *)malloc(LIST_INIT_SIZE * sizeof(ElemType));
	if (!L->elem) {
		exit(OVERFLOW);
	}
	L->length = 0;
	L->capacity = LIST_INIT_SIZE;

	return OK;
}
Status GetElem(SqList L, int i, ElemType *e) {
	if (i < 1 || i > L.length) {
		return ERROR;
	}

	*e = L.elem[i - 1];

	return OK;
}
Status ListInsert(SqList *L, int i, ElemType e) {
	int j;
	ElemType *newElem;

	if (i < 1 || i >(L->length + 1)) {
		return ERROR;
	}

	if (L->length >= L->capacity) {
		newElem = (ElemType *)realloc(L->elem, (L->capacity + LIST_SIZE_INCREMENT) * sizeof(ElemType));
		if (!newElem) {
			exit(OVERFLOW);
		}
		L->elem = newElem;
		L->capacity += LIST_SIZE_INCREMENT;
	}

	for (j = L->length; j >= i; --j) {
		L->elem[j] = L->elem[j - 1];
	}
	L->elem[i - 1] = e;
	L->length += 1;

	return OK;
}
void ListTraverse(SqList L) {
	int i;

	for (i = 0; i < L.length; i++) {
		printf("%d ", L.elem[i]);
	}

	printf("\n");
}
void main() {
	int a, b, c, g;
	int i = 1;
	int j = 1;
	int k = 1;
	ElemType la, lb;
	SqList L;
	SqList La;
	SqList Lb;
	InitList(&L);
	InitList(&La);
	InitList(&Lb);
	scanf("%d", &a);
	for (g = 1;g <= a;g++) {
		scanf("%d", &c);
		ListInsert(&La, g, c);
	}
	scanf("%d", &b);
	for (g = 1;g <= b;g++) {
		scanf("%d", &c);
		ListInsert(&Lb, g, c);
	}
	while ((i <= a) && (j <= b)) {
		GetElem(La, i, &la);
		GetElem(Lb, j, &lb);
		if (la <= lb) {
			ListInsert(&L, k, la);
			++k;++i;
		}
		else {
			ListInsert(&L, k, lb);
			++k;++j;
		}
	}
	while (i <= a) {
		GetElem(La, i, &la);
		ListInsert(&L, k, la);
		k++;i++;
	}
	while (j <= b) {
		GetElem(Lb, j, &lb);
		ListInsert(&L, k, lb);
		k++;j++;
	}
	ListTraverse(L);
}

病毒变种检测
Description
2020年初，新冠肺炎疫情肆虐全球，造成数百万人死亡和巨大的经济损失。新冠病毒是RNA病毒，在繁殖过程中非常容易发生突变，目前已产生了多个
流行全球的变种：Alpha，Delta和Omicron。
判断病毒所属变种的方式是将病毒的RNA序列与变异库中的RNA序列比对，若病毒RNA序列包含变异库中的RNA序列，则病毒属于该变异库中的某个变种。
请你编写程序完成病毒RNA序列的检测。
Input
第一行包含一个整数N(N <= 100)，表示变异库中变种的个数。
接下来的N行中，每一行包含一个字符串，表示变种关键突变点的RNA序列，长度不超过100。
第N + 2行包含一个整数M(M <= 1000)，表示待检测病毒的个数。
接下来的M行中，每一行包含一个字符串，表示病毒RNA序列，长度不超过10000。
Output
输出M行，每一行包含一个整数，表示病毒所属变种的编号(从0开始)。
若病毒属于多个变种，则输出第一个。
若该病毒不属于任何变种，则输出“ - 1”。
Sample Input 1
4
AUUGG
AAAAA
AGUAAGGC
CCUGGCA
7
CGCUAAUAAUGUUGCG
GGCGCGGGCGAGUAAGGCCGUUU
UAGACACAACUA
GUUUGAUAUGAUUGGAC
GAUCAGACGGCCUGGCAAC
AAGACAGCAAACGGA
AAUUAAAAAUGGUUCA
Sample Output 1
-1
2
-1
0
3
-1
1

#include <string.h>
#include <stdio.h>
/* 完成get_next和kmp函数 */

/* 生成子串t的next数组。下标从0开始 */
void get_next(char *t, int next[]) {
	int i = 0, j = -1, len_t;
	len_t = strlen(t);
	next[0] = -1;
	while (i < len_t)
	{
		if (j == -1 || t[i] == t[j])
		{
			i++;
			j++;
			next[i] = j;
		}
		else
		{
			j = next[j];
		}
	}
}

/* KMP算法：在主串s中查找子串t的位置，若找不到则返回-1。下标从0开始 */
int kmp(char *s, char *t, int next[]) {
	int i = 0, j = 0, len_s, len_t;
	len_s = strlen(s);
	len_t = strlen(t);
	while (i < len_s&&j < len_t)
	{
		if (j == -1 || s[i] == t[j])
		{
			i++;
			j++;
		}
		else
		{
			j = next[j];
		}
	}
	if (j >= len_t)
		return i - len_t + 1;
	else
		return -1;

}

char variants[100][101];
char virus[1000][10001];

int next[100][101];

int main() {
	int N, M, i, j, v;

	scanf("%d", &N);
	for (i = 0; i < N; ++i) {
		scanf("%s", variants[i]);
	}

	scanf("%d", &M);
	for (i = 0; i < M; ++i) {
		scanf("%s", virus[i]);
	}

	for (i = 0; i < N; ++i) {
		get_next(variants[i], next[i]);
	}

	for (i = 0; i < M; ++i) {
		v = -1;
		for (j = 0; j < N; ++j) {
			if (kmp(virus[i], variants[j], next[j]) != -1) {
				v = j;
				break;
			}
		}
		printf("%d\n", v);
	}

	return 0;
}

二叉树的重建和遍历
Description
给定一棵二叉树的中序和后续遍历，输出其前序遍历。
Input
输入数据包含2行，第一行是中序遍历，第二行是后序遍历。
每一行是一个字符串，其长度L <= 26，只包含大写字母且没有重复。
Output
输出只有1行，该二叉树的前序遍历结果。
Sample Input 1
ABCDEFG
ACBFGED
Sample Output 1
DBACEGF
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Status;

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2

/* 二叉树元素类型定义 */
typedef char TElemType;

/* 二叉树结点定义 */
typedef struct BiTNode {
	TElemType data;         // 结点元素
	struct BiTNode *lchild; // 左孩子指针
	struct BiTNode *rchild; // 右孩子指针
} BiTNode;

/* 指向二叉树结点的指针 */
typedef BiTNode *BiTree;

typedef void(*Visit)(TElemType);

void print(TElemType e) { printf("%c", e); }

/*
* 初始化
/*

/* 构造空二叉树。
*/
Status InitBiTree(BiTree *T) {
	if (T == NULL) {
		return ERROR;
、、	}

	*T = NULL;
/
//	return OK;
//}
//
