#define  _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

int main()//数据的组织形式
{
	int a = 10000;
	FILE* pf= fopen("test.txt ","wb");
	fwrite(&a, 4, 1, pf);//二进制的形式写到文件中
	fclose(pf);
	pf = NULL;

	return 0;
}

struct _iobuf//FILE结构体
{
	char *_ptr;
    int _cnt;
	char *_base;
    int fIag;
    int file;
	int _charbuf;
    int _bufsiz;
    char *_tmpfname;
};
typedef struct _iobuf FILE;

int main()
{
	//打开文件test. txt
	//相对路径
	//..表示上一级路径
	//.表示当前路径
	// fopen("../../test.txt","r");
	// fopen("test.txt"，"r");
	//绝对路径的写法
	// fopen("C:\\2020_code\\84班\\test_5_6\\test_5_6\\test.txt","r");
	FILE* pf = fopen("test.txt","r");//"r" 无指定文件出错  "w"无指定文件重新创建
	if (pf == NULL)
	{
		printf("%s\n",strerror(errno));
		return 0;
    }
    //打开成功
	//读文件


    //关闭文件
	fclose(pf);
	pf = NULL;

    return 0;
}

int main()//字符输出函数fputc函数使用
{
	FILE* pfWrite = fopen("test.txt", "w");
	if (pfWrite == NULL)
	{
		printf("%s\n", strerror(errno));
		return 0;
	}
	//写文件
	fputc('b', pfWrite);
	fputc('i', pfWrite);
	fputc('t', pfWrite);
	//关闭文件
	fclose(pfWrite);
	pfWrite = NULL;

	return 0;
}

int main()//字符输入函数fgetc函数使用
{
	FILE* pfRead = fopen("test.txt","r");
	if (pfRead == NULL)
	{
		printf("%s\n", strerror(errno));
		return 0;
	}
	//读文件
	printf("%c",fgetc(pfRead));//b
	printf("%c",fgetc(pfRead));//i
	printf("%c",fgetc(pfRead));//t
	// 关闭文件
	fclose(pfRead);
	pfRead = NULL;

	return 0;
}

int main()
{
	int ch = fgetc(stdin);//字符输入
	fputc(ch,stdout);//字符输出
	return 0;
}

从键盘输入
输出到屏幕
键盘&屏幕都是外部设备
键盘 - 标准输入设备 - stdin
屏幕 - 标准输出设备 - stdout
是一个程序默认打开的两个流设备
stdin FILE*
stdout FILE*
stderr FILE*

int main()//文本输入函数fgets函数使用
{
	char buf[1024] = { 0 };
	FILE* pf = fopen("test.txt", "r");
	if (pf == NULL)
	{
		return 0;
	}
	//读文件
	fgets(buf, 1024, pf);//文本行输入
	//printf("%s", buf);
	puts(buf);
	fgets(buf, 1024, pf);
	//printf("%s",buf);
	puts(buf);//两种写法等同

	fclose(pf);
	pf = NULL;
	return 0;
}

int main()//文本输出函数fputs函数使用
{
	char buf[1024] = { 0 };
	FILE* pf = fopen("test.txt", "w");
	if (pf == NULL)
	{
		return 0;
	}
	//写文件
	fputs("hello\n", pf);
	fputs("world \n", pf);

	fclose(pf);
	pf = NULL;

	return 0;
}

struct S
{
	int n;
	float score;
	char arr[10];
};
int main()//格式化输出函数fprintf函数使用
{
	struct S s = { 100, 3.14f, "bit" };
	FILE* pf = fopen("test.txt", "w");
	if (pf == NULL)
	{
		return 0;
	}
	//格式化的形式写文件
	fprintf(pf,"%d %f %s", s.n, s.score, s.arr);

	fclose(pf);
	pf = NULL;
	return 0;
}

struct S
{
	int n;
	float score;
	char arr[10];
};
int main()//格式化输入函数fscanf函数使用
{
	struct S s = { 0 };
	FILE* pf = fopen("test.txt", "r");
	if (pf == NULL)
	{
		return 0;
	}
	//格式化的输入数据
	fscanf(pf,"%d %f %s", &(s.n), &(s.score), s.arr);
	printf("%d %f %s \n", s.n, s.score, s.arr);

	fclose(pf);
	pf = NULL;

	return 0;
}

struct S
{
	int n;
	float score;
	char arr[10];
};
int main() 
{
	struct S s = { 0 };
	fscanf(stdin, "%d %f %s", &(s.n),&(s.score), s.arr);//格式化输入
	fprintf(stdout, "%d %.2f %s", s.n, s.score, s.arr);//格式化输出
	return 0;
}

struct S
{
	int n;
    float score;
	char arr[10];
};
int main()
{
	struct S s = { 100,3.14f,"abcdef" };
	struct S tmp = { 0 };
	char buf[1024] = { 0 };
	//把格式化的数据转换成字符串存储到buf
	sprintf(buf, "%d %f %s", s.n, s.score, s.arr);
	//printf("%s \n", buf);
	//从buf中读取格式化的数据到tmp中
	sscanf(buf, "%d%f %s", &(tmp.n), &(tmp.score), tmp.arr);
	printf("%d %f %s\n", tmp.n, tmp.score, tmp.arr);
	return 0;
}

scanf/printf是针对标准输入流/标准输出流的格式化输入/输出语句
fscanf/fprintf是针对所有输入流/所有输出流的格式化输入/输出语句
sscanf/sprintf sscanf是从字符串中读取格式化的数据
               sprintf是把格式化数据输出成(存储到)字符串

struct S
{
	char name[20];
        int age;
	double score;
};
int main()//二进制输出函数fwrite函数使用
{
	struct S s = { "张三",20,55.6 };
	FILE* pf = fopen("test.txt", "wb");
	if (pf == NULL)
	{
		return 0;
	}
	//二进制的形式写文件
	fwrite(&s, sizeof(struct S),1, pf);

	fclose(pf);
	pf = NULL;
	return 0;
}

struct S
{
	char name[20];
	int age;
	double score;
};
int main()//二进制输入函数fread函数使用
{
	//struct Ss={“张三"，20,55.6};
	struct S tmp = { 0 };
	FILE* pf = fopen("test.txt", "rb");
	if (pf == NULL)
	{
		return 0;
	}
	//二进制的形式都文件
	fread(&tmp, sizeof(struct S), 1, pf);
	printf("%s %d %1f\n", tmp.name, tmp.age, tmp.score);
	
	fclose(pf);
	pf = NULL;
	return 0;
}

int main()//文件随机读写函数fseek函数使用
{
	FILE* pf = fopen("test.txt", "r");
	if (pf == NULL)
	{
		return 0;
	}
	// 1.定位文件指针
	fseek(pf, -4, SEEK_END);
	//2.读取文件
	int ch = fgetc(pf);
	printf("%c\n", ch);
	
	fclose(pf);
	pf = NULL;
	return 0;
}

int main()//读取相对于起始位置的偏移量ftell函数使用
{
	FILE* pf = fopen("test.txt", "r");
	if (pf == NULL)
	{
		return 0;
	}
	//1.定位文件指针
	fseek(pf, -2, SEEK_END);
	int pos = ftell(pf);//相对于起始位置的偏移量
	printf("%d\n", pos);//4
	
	fclose(pf);
	pf = NULL;
        return 0;
}

int main()//让文件指针回到起始位置rewind函数使用
{
	FILE* pf = fopen("test.txt","r");
	if (pf == NULL)
	{
		return 0;
	}
	//1,定位文件指针
	//fseek(pf, -2,SEEK_END);
	int ch = fgetc(pf);
	printf("%c\n", ch);//a
	//int pos = ftel1(pf);
	//printf( "%d\n", pos);
	rewind(pf);//回到文件起始位置
	ch = fgetc(pf);
	printf("%c\n", ch);//a

	fclose(pf);
	pf = NULL;
	return 0;
}

int main()
{
	//EOF
	//feof() ://EOF - end of file-文件结束标志
	FILE* pf = fopen("test.txt","r");//此时文件为空
	if (pf == NULL)
		return 0;
	int ch = fgetc(pf);
	printf("%d\n",ch);//文件为空，fgetc函数返回值为-1

	fclose(pf);
	pf = NULL;
	return 0;
}

int main()//EOF正确用法 feof函数和ferror函数使用
{
	int c; // 注意:int, 非char，要求处理EOF
	FILE* fp = fopen("test.txt", "r");
	if (!fp)
	{
		perror("File opening fai1ed");
		return EXIT_FAILURE;
	}
	// fgetc当读取失败的时候或者遇到文件结束的时候，都会返回EOF
	while ((c = fgetc(fp)) != EOF)//标准C I/0读取文件循环
	{
		putchar(c);
        }
	// 判断是什么原因结束的
	if(ferror(fp))
		puts("I/0 error when reading");
	else if (feof(fp))
		puts("End of fi1e reached successfu1ly");

	fclose(fp);
	fp = NULL;
	return 0;
}

int main()
{
	// strerror - 把错误码对应的锚误信息的字符串地址返回
	//printf("%s\n", strerror(enrno));

	//perror使用
	FILE* pf = fopen("test2.txt", "r");
	if (pf == NULL)
	{
		perror("open file test2.txt");
		return 0;
	}
	//读文件

	fclose(pf);
	pf = NULL;
	return 0;
}
enum { SIZE = 5 };
int main(void)//二进制文件读取feof判断
{
	double a[SIZE] = { 1.0,2.0,3.0,4.0,5.0 };
	double b = 0.0;
	size_t ret_code = 0;
	FILE*fp = fopen("test.bin","wb");// 必须用二进制模式
	fwrite(a, sizeof(*a),SIZE,fp);//写doubte的数组
	fclose(fp);

	fp = fopen("test.bin", "rb");
	//读doub1e的数组
	while ((ret_code = fread(&b,sizeof(double),1,fp)) >= 1) 
	{
		printf("%1f\n", b);
	}
	if (feof(fp))
		printf("Error reading test.bin: unexpected end of fi1e\n");
	else if (ferror(fp))
		perror("Error reading test.bin");

	fclose(fp);
	fp = NULL;
}
