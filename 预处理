#define  _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stddef.h>

//组成一个程序的每个源文件通过编译过程分别转换成目标代码(object code)
//每个目标文件由链接器(llnker ）捆绑在一起, 形成一个单一而完整的可执行程序。
//链接器同时也会引入标准c函数库中任何被该程序折用到的函数，而且它可以搜索程序员个人的程序库将其需要的函数也链接到程序中。

int main()//预定义符号使用
{
	//printf("%s\n",__FILE___);
	//printf("%d\n",__LINE___);
	//printf("%s\n",__DATE__);
	//printf("%s\n",__TIME__);
	//写日志文件
	int i = 0;
	int arr[10] = { 0 };
	FILE* pf = fopen("log.txt", "w");
	for (i = 0; i < 10;i++)
	{
		arr[i] = i;
		fprintf(pf, "file:%s line:%d date:%s time:%s i=%dyn",__FILE__, __LINE__, __DATE__,__TIME__, i);
	}
	fclose(pf);
	pf = NULL;
	for (i = 0; i < 10;i++)
	{
		printf("%d ", arr[i]);
	}

	return 0;
}

预定义符号
__FILE__  //进行编译的源文件
__LINE__  //文件当前的行号
__DATE__  // 文件被编译的且期
__TIME__  // 文件被编译的时间
__STDC__  // 如果编译器遵循ANSJ C.其值为1，否则未定义
这些预定义符号都是语言内置的。举个栗子 :
printf("file:%s line:%d\n",__FILE__, __LINE__);

#define MAx 1000
#define reg register        // 为 register这个关键字，创建一个简短的名字
#define do_forever for(;;)  //用更形象的符号来替换一种实现
#define CASE break;case     //在写case语句的时候直动把 break写上。
//如果定义的stuff过长，可以分成几行写,除了最后一行外，每行的后面都加一个反斜杠(续行符)。
#define DEBUG_PRINT printf("file:%s\tline:%d\t  \
                          date:%s\ttime:%s\n",  \
	                      __FILE__,__LINE__,    \
	                      __DATE__,__TIME__)
