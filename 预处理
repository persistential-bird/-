#define  _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stddef.h>

//组成一个程序的每个源文件通过编译过程分别转换成目标代码(object code)
//每个目标文件由链接器(llnker ）捆绑在一起, 形成一个单一而完整的可执行程序。
//链接器同时也会引入标准c函数库中任何被该程序折用到的函数，而且它可以搜索程序员个人的程序库将其需要的函数也链接到程序中。

int main()//预定义符号使用
{
	//printf("%s\n",__FILE___);
	//printf("%d\n",__LINE___);
	//printf("%s\n",__DATE__);
	//printf("%s\n",__TIME__);
	//写日志文件
	int i = 0;
	int arr[10] = { 0 };
	FILE* pf = fopen("log.txt", "w");
	for (i = 0; i < 10;i++)
	{
		arr[i] = i;
		fprintf(pf, "file:%s line:%d date:%s time:%s i=%dyn",__FILE__, __LINE__, __DATE__,__TIME__, i);
	}
	fclose(pf);
	pf = NULL;
	for (i = 0; i < 10;i++)
	{
		printf("%d ", arr[i]);
	}

	return 0;
}

预定义符号
__FILE__  //进行编译的源文件
__LINE__  //文件当前的行号
__DATE__  // 文件被编译的且期
__TIME__  // 文件被编译的时间
__STDC__  // 如果编译器遵循ANSJ C.其值为1，否则未定义
这些预定义符号都是语言内置的。举个栗子 :
printf("file:%s line:%d\n",__FILE__, __LINE__);

#define MAx 1000
#define reg register        // 为 register这个关键字，创建一个简短的名字
#define do_forever for(;;)  //用更形象的符号来替换一种实现
#define CASE break;case     //在写case语句的时候直动把 break写上。
//如果定义的stuff过长，可以分成几行写,除了最后一行外，每行的后面都加一个反斜杠(续行符)。
#define DEBUG_PRINT printf("file:%s\tline:%d\t  \
                          date:%s\ttime:%s\n",  \
	                      __FILE__,__LINE__,    \
	                      __DATE__,__TIME__)
			      
#define定义宏
#define机制包括了一个规定，允许把参数替换到文本中, 这种实现通常称为左(macro)或定义宏(define macro). ..
下面是宏的申明方式:
#define name( parament-1ist ) stuff 其中的parament-list是一个由逗号隔开的符号表，它们可能出现在stuff中,
数
注意 : 参数列表的左括号必须与name紧邻。如果两者之间有任何空白存在，参数列表就会被解释为stuff的一部分。
如︰
#define SQUARE(x) x*x

#define替换规则
在程序中扩展#define定义符号和宏时，需要涉及几个步骤。
1.在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号。如果是，它们首先被替换。
2.替换文本随后被插入到程序中原来文本的位置。对于宏，参数名被他们的值替换。
3.最后，再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号。如果是，就重复上述处理过程。

注意:
1.宏参数和#define定义中可以出现其他#define定义的变量。但是对于宏，不能出现递归。
2.当预处理器搜索#define定义的符号的时候，字符串常量的内容并不被搜索。

#define PRINT(x) printf("the value of "#x" is %d\n",x)
int main()//define宏定义#作用实例(可在语句中使用各种成员名)
{
	//printf("hello world\n");
	//printf("hello""world\n");
	//printf("hel""1o""wonld\n");
	int a = 10;
	int b = 20;
	PRINT(a);
	//printf( "the value of""a""is %d\n",a);
	PRINT(b);
	//printf( "the value of""b""is %d\n",b);
	return 0;
}

#define CAT(X,Y) X##Y
int main()//##可把它两边的符号合成为一个符号
{
	int Class84 = 2019;
	// printf("%d\n", Class84);
	printf("%d\n", CAT(Class, 84));
	//printf("%d\n", C1ass##84);
	//printf("%d\n".Class84);
	return 0;
}

带副作用的宏参数
当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么你在使用这个宏的时候就可能导
致不可预测的后果。副作用就是表达式求值的时候出现的永久性效果。例如︰
x + 1;//不带副作用
X++;//带有副作用
MAX宏可以证明具有副作用的参数所引起的问题

#define MAX(X, Y) ((X) > (Y) ? (X) : (Y))
int main()//宏定义副作用实例
{
	int a = 10;
	int b = 11;
	int max = MAX(a++, b++);//等同下列
	//int max = ((a++) > (b++) ? (a++) : (b++));
	printf("%d\n", max);//12
	printf("%d\n", a);//11
	printf("%d\n",b);//13
	return 0;
}

// 函数 
int Max(int x, int y)
{
	return(x > y ? x : y);
}
float Max2(float x, float y) 
{
	return (x > y ? x : y);
}
//宏
#define MAX(X,Y) ((X)>(Y)?(X):(Y))
int main()//
{
	int a = 10;
	int b = 20;
	float c = 3.0f;
	float d = 4.0f;
	//函数在调用的时候
	//会有函数调用和返回的开销/ /
	float max = Max2(c,d);
	printf("max = %f\n", max);
	//预处理阶段就完成了替换
	//没有函数的调用和返回的开销
	max = MAX(c,d);
	//max = ((c) > (d) ? (c) : (d));
	printf("max = %f\n", max);
	//int max = Max(a,b);
	//printf( "max = %d\n", max);
	//max = MAX(a,b);
	//printf("max = %d\n",max);
	return 0;
}

#define MALLOC(num,type) (type*)malloc(num*sizeof(type))
int main()//宏定义模拟任意类型动态存储
{
	int* p = (int*)malloc(10 * sizeof(int));
	int* p = MALLOC(10, int);//等同下列
	//int* p = (int*)mallocf(10 * sizeof(int));
	return 0;
}

宏有时候可以做函数做不到的事情。比如:宏的参数可以出现类型，但是函数做不到。
#define MALLOC(num, type) (type * )ma11oc(num * sizeof(type))
	//使用
	MALLOC(10, int);//类型作为参数
	//预处理器替换之后:
	(int *)malloc(10 * sizeof(int));

#define MAX 100
int main()//#undef定义使用实例
{
	printf("MAX =%d\n", MAX);
#undef MAX//移除宏定义指令
	printf("MAX = %d\n", MAX);//已移除
	return 0;
}

int main()//
{
	int array[ARRAY_SIZE];
        int i = 0;
	for (i = 0;i < ARRAY_SIZE; i++)
	{
        array[i] = i;
	}
	for (i = 0; i < ARRAY_SIZE; i++)
	{
		printf("%d ", array[i]);
	}
	printf("\n");
	return 0;
}
