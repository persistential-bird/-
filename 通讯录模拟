contact.h
#define  _CRT_SECURE_NO_WARNINGS 1
#define MAX 1000

#define MAX_NAME 20
#define MAX_SEX 5
#define MAX_TELE 12
#define MAX_ADDR 30

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//enum option
//{
//	exit,//0
//	add,//1
//	del,
//	search,
//	modify,
//	show,
//	sort
//};
struct Peoinfo
{
	char name[MAX_NAME];
	int age;
	char sex[MAX_SEX];
	char tele[MAX_TELE];
	char addr[MAX_ADDR];
};



//通讯录类型
struct contact
{
	struct Peoinfo data[MAX];//!存放一千个信息
	int size;//记录当前已经有的元素个数
};

// 声明函数
//初始化通讯录的函数
void initcontact(struct contact* ps);

//增加一个信息到通讯录
void addcontact(struct contact* ps);

//打印通讯录中的信息
void showcontact(const struct contact* ps);

//删除指定联系人
void delcontact(struct contact* ps);

//查找指定人的信息
void searchcontact(const struct contact* ps);

//修改指定联系人
void modifycontact(struct contact* ps);

//排序通讯录内容
void sortcontact(struct contact* ps);


contact.c
#define  _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include "contact.h"

void initcontact(struct contact* ps)
{
	memset(ps->data, 0, sizeof(ps->data));
	ps->size = 0;//设量通讯录最初只有0个元素
}

void addcontact(struct contact* ps)
{
	if (ps->size == MAX)
	{
		printf("通讯录已满，无法增加\n");
	}
	else
	{
		printf("请输入名字:>");
		scanf("%s", ps->data[ps->size].name);
		printf("请输入年龄:>");
		scanf("%d", &(ps->data[ps->size].age));
		printf("请输入性别:>");
		scanf("%s",ps->data[ps->size].sex);
		printf("请输入电话;");
		scanf("%s",ps->data[ps->size].tele);
		printf("请输入地址:>");
		scanf("%s", ps->data[ps->size].addr);

		ps->size++;
		printf("添加成功\n");
	}
}

void showcontact(const struct contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空格\n");
	}
	else
	{
		int i = 0;
		//标题
		printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "性别", "电话", "地址");
		//数据
		for (i = 0;i < ps->size;i++)
		{
			printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
			ps->data[i].name,
			ps->data[i].age,
			ps->data[i].sex, 
			ps->data[i].tele, 
			ps->data[i].addr);
		}
    }

}

static int findbyname(const struct contact* ps, char name[MAX_NAME])
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (0 == strcmp(ps->data[i].name, name))
		{
			return i;
		}
	}
	return -1;//找不到的情况
}

void delcontact(struct contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要删除人的名字:>");
	scanf("%s", name);
	//1,查找要删除的人在什么位置
	//找到了返回名字所在元素下标
	//找不到返回 -1
	int pos = findbyname(ps, name);
	//2．删除
	if (pos == -1)
	{
		printf("要删除的人不存在\n");
	}
	else
	{
		//删除数据
		int j=0;
		for (j = pos;j < ps->size - 1; j++)
		{
			ps->data[j] = ps->data[j + 1];
		}
		ps->size--;
		printf("删除成功\n");
	}
}

void searchcontact(const struct contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要查找人的名字:>");
	scanf("%s", name);
	int pos = findbyname(ps, name);
	if (pos == -1)
	{
		printf("要查找的人不存在\n");
	}
	else
	{
		printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "性别", "电话", "地址");
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
				ps->data[pos].name,
				ps->data[pos].age,
				ps->data[pos].sex,
				ps->data[pos].tele,
				ps->data[pos].addr);
	}
}

void modifycontact(struct contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要修改人的名字:>");
	scanf("%s", name);
	int pos = findbyname(ps, name);if (pos == -1)
	{
		printf("要修改人的信息不存在\n");
	}
	else {
		printf("请输入名字:>");
		scanf("%s", ps->data[pos].name);printf("请输入年龄:>");
		scanf("%d", &(ps->data[pos].age));printf("请输入性别:>");
		scanf("%s", ps->data[pos].sex);printf("请输入电话:>");
		scanf("%s", ps->data[pos].tele);printf("请输入地址:>");
		scanf("%s", ps->data[pos].addr);

		printf("修改完成\n");
	}

}

void swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0;i < width;i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}
void buble_sort(void*base, int sz, int width, int(*cmp)(void*e1, void*e2))  //冒泡排序改进版（万金油）
{
	int i = 0;
	//趟数
	for (i = 0;i < sz - 1;i++)
	{
		//每一趟的比较对数
		int j = 0;
		for (j = 0;j < sz - 1 - i;j++)
		{
			//两个元素的比较
			if (cmp((char*)base + j * width, (char*)base + (j + 1)*width) > 0)
			{
				//交换
				swap((char*)base + j * width, (char*)base + (j + 1)*width, width);
			}
		}
	}
}
int cmp_stu_by_name(const void*e1, const void*e2)
{
	//比较名字就是比较字符串，不能直接用<=>比较，需用strcmp函数
	return strcmp(((((struct contact*)e1)->data)->name), ((((struct contact*)e2)->data)->name));
}
void sortcontact(struct contact* ps)
{
	buble_sort(ps->data, ps->size, sizeof((ps->data)[0]), cmp_stu_by_name);
	int i = 0;
	printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "性别", "电话", "地址");
	for (i = 0;i < ps->size;i++)
	{
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
			ps->data[i].name,
			ps->data[i].age,
			ps->data[i].sex,
			ps->data[i].tele,
			ps->data[i].addr);
	}
}


test.c
