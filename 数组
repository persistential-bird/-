#define  _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
void bubble_sort(int arr[],int sz)  //ð������ ����
{
	int i = 0;
	for (i = 0;i < sz - 1;i++)
	{
		int flag = 1;//�Ż�
		int j = 0;
		for (j = 0;j < sz - 1 - i;j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tem = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tem;
				flag = 0;
			}
		}
		if (flag == 1)
		{
			break;
		}

	}
}
int main()
{
	int arr[] = {10,9,8,7,6,5,4,3,2,11};
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);
	for (i = 0;i<=sz-1;i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
//#include <stdio.h>
//int main()   //��ӡ��ά�����Ԫ�ص�ַ
//{
//	int arr[4][4] = { {3,6,8,0},{1,7,4,9},{2,5} };
//	int i = 0;
//	for (i = 0;i < 4;i++)
//	{
//		int j = 0;
//		for (j = 0;j < 4;j++)
//		{
//			printf("arr[%d][%d]=%p\n", i, j, &arr[i][j]);
//		}
//	}
//	return 0;
//}
//#include <stdio.h>
//int main()           //��ӡһά�����Ԫ�ص�ַ
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,0 };
//	int len = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	for (i = 0;i < len;i++)
//	{
//		printf("&arr[%d]=%p\n", i, &arr[i]);
//	}
//	return 0;
//}
//int main()      //交换两数组中的值
//{
//	int arr1[5] = { 1,3,5,7,9 };
//	int arr2[5] = { 2,4,6,8,10 };
//	int tmp = 0;
//	int i = 0;
//	int sz = sizeof(arr1) / sizeof(arr1[0]);
//	for (i = 0;i < sz;i++)
//	{
//		tmp= arr1[i];
//		arr1[i] = arr2[i];
//		arr2[i] = tmp;
//		printf("%d-----%d\n", arr1[i], arr2[i]);
//	}
//	return 0;
//}
//void init(int arr[],int sz)
//{
//	int i = 0;
//	for (i = 0;i < sz;i++)
//	{
//		arr[i] = 0;
//	}
//}
//void print(int arr[],int sz)
//{
//	int i = 0;
//	for (i = 0;i < sz;i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//void reserve(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	while (left < right)
//	{
//		int tmp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = arr[left];
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//init(arr, sz);    //初始化数组各元素为0
//	print(arr, sz);
//	reserve(arr, sz);   //逆置数组中的元素
//	print(arr, sz);
//	return 0;
//}
