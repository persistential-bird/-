#define  _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>

char *GetMemory(void) 
{
	char p[] = "hello world";
	return p;
}
void Test(void) 
{
	char *str = NULL;
	str = GetMemory();
	printf(str);
}
int main()//栈区内存销毁 程序err
{
	Test();
	return 0;
}


void GetMemory(char **p, int num) 
{
	*p = (char *)malloc(num);
}
void Test(void)
{
	char *str = NULL;
	GetMemory(&str,100);
	strcpy(str, "hello");
	printf(str);
	//改
	free(str);
	str = NULL;
}
int main()//存在内存泄漏
{
	Test();
	return 0;
}

void Test(void) 
{
	char *str = (char *)malloc(100);
	strcpy(str, "hello");
	free(str);//free释放str指向的空间后，并不会把str置为NULL
	//str = NULL;// 改
	if (str != NULL) //越界访问
	{
		strcpy(str, "world");
		printf(str);
	}
}
int main()
{
	Test();
	return 0;
}

C / C++程序内存分配的几个区域:
1.栈区(stack) : 在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。
栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。栈区主要存放运行函数而分配的局部变量, 函数参数、返回数据、返回地址等。
2堆区(heap) : 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式类似于链表。
3.数据段（静态区）(static）存放全局变量、静态数据。程序结束后由系统释放。4.代码段:存放函数体(类成员函数和全局函数）的二进制代码。

struct S
{
    int n;
    int arr[];//未知大小的
};
//两种写法等价
struct S 
{
	int n;
	int arr[0];//未知大小的-柔性数组成员-数组的大小是可以调整的
};
int main() 
{
	//struct S s;
	//printf("%d\n", sizeof(s));//4
	struct S* ps = (struct S*)malloc(sizeof(struct S) + 5 * sizeof(int));
	ps->n = 100;
	int i = 0;
	for (i = 0;i < 5; i++) 
	{
		ps->arr[i] = i;//0 1 2 3 4
	}
	struct S* ptr = realloc(ps,44);
	if (ptr != NULL)
	{
		ps = ptr;
	}
	for (i = 5; i < 10; i++)
	{
		ps->arr[i] = i;
	}
	for (i = 0; i < 10; i++) 
	{
		printf("%d ", ps->arr[i]);
	}
	//释放
	free(ps);
	ps =NULL;
	return 0;
}
