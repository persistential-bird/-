#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main()
{
	// //数组名是首元素的地址
	// //1.sizeof(数组名) - 数组名表示整个数组
	// //2.& 数组名 - 数组名表示整个数组
	//
	// //一维数组
	//int a[] = { 1,2,3,4 };// 4 * 4 = 16
	//printf("%d\n", sizeof(a));//sizeof(数组名)-计算的是数组总大小-单位是字节-16
	//printf("%d\n",sizeof(a + 0));//4/8  数组名这里表示收元素的值，a+0还是首元素地址，地址的大小就是4/8个字节
	//printf("%d\n",sizeof(*a));//4–数组名表示首元素地址，*a就是首元素，sizeof(*a)就是4
	//printf("%d\n",sizeof(a + 1));//4/8-数组名这里表示收元素的值,a+1第2个元素的地址，地址的大小就是4/8个字节
	//printf("%d\n", sizeof(a[1])); //4--第2个元素的大小
	//printf("%d\n",sizeof(&a));//4/8 &a取出的是数组的地址，但是数组的地址那也是地址，地址的大小就是4/8个字节
	//printf("%d\n",sizeof(*&a));//16- &a数组的地址，数组的地址解引用访问的数组, sizeof计算的就是数组的大小单位是字节
	//printf("%d\n",sizeof(&a + 1));//4/8 &a是数组的地址，&a+1虽然地址跳过整个数组，但还是地址，所以是4/8个字节
	//printf("%d\n", sizeof(&a[0]));//4/8 &a[0]是第一个元素的地址
	//printf("%d\n", sizeof(&a[0] + 1));//4/8 &a[0]+1是第二个元素的地址

	// //字符数组
	//char arr[] = { 'a', 'b', 'c', 'd', 'e','f'};
	//printf("%d\n",sizeof(arr));//sizeof计算机的是数组大小，6*1 = 6字节
	//printf("%d\n",sizeof(arr + 0));//4/8  arr是首元素的地址，arr+0还是首元素的地址地址的大小是4/8字节
	//printf("%d\n",sizeof(*arr)); //1 arr是首元素的地址，*arr就是首元素，首元素是字符大小是一个字节
	//printf("%d\n",sizeof(arr[1])); //1
	//printf("%d\n",sizeof(&arr)); //arr 虽然是数组的地址，但还是地址，地址大小是4/8个字节
	//printf("%d\n",sizeof(&arr + 1));//&arr+1.是跳过整个数组后的地址，地址大小是4/8个字节
	//printf("%d\n",sizeof(&arr[0] +1));//4/8  第二个元素的地址
	
	//printf("%d\n", strlen(arr));//随机值
	//printf("%d\n", strlen(arr + 0));//随机值
	////printf("%d\n",strlen( "ar));//err
	////pnintf("%d\n", strlen(arr[11));// err
	//printf("%d\n", strlen(&arr));//随机值
	//printf("%d\n", strlen(&arr + 1));//随机值-6
	//printf("%d\n", strlen(&arr[0] +1));//随机值-1

	//char arr[]={'a','b','c', 'd ', 'e','f'};
	//char arr[] = "abcdef";
	//printf("%d\n",sizeof(arr));//7 sizeof(arr)计算的是数组的大小，单位是字节
        //printf("%d\n",sizeof(arr + 0));//4/8计首的是地址的大小-arr+0是首元素的地址
	//printf("%d\n",sizeof(*arr)); //1 *arr是首元素，sizeof(*arr)计算首元素的大小
        //printf("%d\n",sizeof(arr[1]));//1 arr [1]是第二个元素,sizeof( arr[1])计算的是第二个元素的大小
        //printf("%d\n",sizeof(&arr)); //4/8 &arr虽然是数组的地址，但也是地址。所以是4/8个字节
	//printf("%d\n",sizeof(&arr+1));//4/8 &arr+1是跳过整个数组后的地址，但也是地址
	//printf("%d\n",sizeof(&arr[0] + 1));// 4 / 8  &arn[0] + 1 第二个元素的地址

	char* p = "abcdef";   //p只能存储一个字节，即p存储的是'a'的地址，指向整个字符串
	//printf("%d\n", strlen(p));//6
	//printf("%d\n", strlen(p + 1));//5
	////printf("%d\n", strlen(p));//err
	////printf("%d\n", strlen(p[0]));//err
	//printf("%d\n", strlen(&p));//随机值
	//printf("%d\n", strlen(&p + 1));//随机值
	//printf("%d\n", strlen(&p[0] +1));//5

	printf("%d\n",sizeof(p));//4/8 -计算指针变量p的大小
	printf("%d\n",sizeof(p + 1)); //4/8 -  p + 1得到的是字符b的地址
	printf("%d\n",sizeof(*p));//1 *p就是字符串的第一个字符a'
	printf("%d\n",sizeof(p[0]));//1  int arr[10]; arr[0] == *(arr+0) p[0] == *(p + 0)== 'a'
	printf("%d\n",sizeof(&p));//4/8 地址
	printf("%d\n", sizeof(&p+1));//4/8 地址
	printf("%d\n",sizeof(&p[0] +1));//4/8 地址

	// //二维数组
	int a[3][4] = { 0 };
	printf("%d\n",sizeof(a));//48
	printf("%d\n",sizeof(a[0][0]));//4
	printf("%d\n",sizeof(a[0])); //16 a[0]相当于第一行作为一维数组的数组名
	// //sizeof( arr[e])把数组名单独放在sizeof()内,计算的是第一行的大小

	printf("%d\n", sizeof(a[0] + 1));//4--a[0]是第一行的数组名，数组名此时是首元素的地址，a[0]其实就是第一行第一个元素的地址
	// //所以 a[0]+1就是第一行第二个元素的地址-地址大小是4/8个字节
	
	printf("%d\n",sizeof(*(a[0] + 1)));//4 --*(a[0] + 1))是第一行第二个元素，大小是4个字节
	printf("%d\n",sizeof(a + 1));//4   a是二维数组的数组名，没有sizeof(a)，也没有&(a) ,所以a是首元素地址
	// //而把二维数组看成一维数组时，二维数组的首元素是他的第一行， a就是第一行(首元素）的地址  a + 1就是第二行的地址

	printf("%d\n",sizeof(*(a + 1)));//16，sizeof(a[1]）计算第二行的大小,单位是字节
	printf("%d\n",sizeof(&a[0]+1));//4，第二行的地址
	printf("%d\n",sizeof(*(&a[0] + 1)));//16计算第二行的大小,单位是字节
	printf("%d\n",sizeof(*a)); //16  a是首元素地址-第一行的地址。*a就是第一行,sizeof(*a)就是计算第一行的大小
	printf（"%d\n"，sizeof（a[3]））;//16
	
	return 0;
}

struct Tetf
{
	int Num;
	char *pcName;
	short sDate;
	char cha[2];
	short sBa[4];
}* p;

// //假设p的值为ex10008o。如下表表达式的值分别为多少 ?
// //已知,结构体Test类型的变量大小是20个学节
int main()
{
	p = (struct Test*)0x100000;
	printf("%p\n",p + 0x1);  //0x100014 /00100014
	printf("%p\n",(unsigned long)p + 0x1);  //0x100001
	printf("%p\n",(unsigned int*)p + 0x1);  //0x100004

	return 0;
}

int main() 
{
	int a[4] = { 1,2,3,4 };
	int *ptr1 = (int *)(&a + 1);//小端存储
	int *ptr2 = (int *)((int)a + 1);
	printf("%x,%x", ptr1[-1],*ptr2);//4  2000000
	return 0;
}

int main()
{
	int aa[2][5] = { 1,2,3,4,5,6,7,8,9,10 };
	int *ptr1 = (int *)(&aa + 1);
	int *ptr2 = (int *)(*(aa + 1));
	printf("%d %d\n", *(ptr1 - 1), *(ptr2 - 1));//10  5
	return 0;
}

int main()
{
	int a[5][5];int(*p)[4];
	p = a;// int(*)[4] ----- int(*)[5]
	printf("%p,%d\n", &p[4][2] - &a[4][2],&p[4][2] - &a[4][2]);//FFFFFFFC  -4
	return 0;
}


int main()
{
	int a[3][2] = { (0,1),(2,3),(4, 5) };
	int *p;
	p = a[0];
	printf("%d\n", p[0]);//1
	return 0;
}

int main()
{
	char* a[] = {"work", "at", "alibaba"};
	char**pa = a;
	pa++;
	printf("%s\n", *pa);//"at"
	return 0;
}

int main()
{
	char *c[] = { "ENTER","NEW", "POINT”,”FIRST" };
	char**cp[] = { c + 3,c + 2,c + 1,c };
	char***cpp = cp;
	printf("%s\n", **++cpp);//POINT
	printf("%s\n", *--*++cpp+3);//ER
	printf("%s\n", *cpp[-2]+3);//ST
	printf("%s\n", cpp[-1][-1] + 1);//EW
	return 0;
}
