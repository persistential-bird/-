结构体的自引用
struct Node
{
	int data;// 4
	struct Node* next;//4/8
};

typedef struct Node//结构体匿名使用，不可省略typedef struct Node中Node后直接struct调用
{
	double d;
	int data;//4
	struct Node* next;// 4/8
}Node;
int main()
{
	struct Node n1;
	Node n2;
	return 0;
}

struct S3
{
	char c;
	int i;
};
struct S4
{
	char c;
	struct S3 s3;
	double d;
};
int main()//结构体内存对齐
{
	//structS1 s1 = { 0 };
	//prin("%d\n",sizeof(s1));
	//struct S2 s2={ 0 };
	// printf("%d\n"，sizeof(s2);
	struct S3 s3;
	printf("%d\n", sizeof(s3));//8
	struct S4 s4;
	printf("%d\n", sizeof(s4));//24
	return 0;
}

为什么存在内存对齐?
大部分的参考资料都是如是说的;
1.平台原因(移植原因):不是所有的硬件平台都能访问任意地址上的任意数据的;某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。
⒉性能原因:数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问;而对齐的内存访问仅需要一次访问。
总体来说:
结构体的内存对齐是拿空间来换取时间的做法。

//设量默认对齐数位4
#pragma pack(4)
struct S
{
	char c1;//1 
	// 7
	double d;//8
};
#pragma pack()
//取消设宣的默认对齐数
int main()
{
	struct S s;
	printf("%d\n", sizeof(s));//12
	return 0;
}

typedef struct 
{
	int a;//0-3 4
	char b;//4 1
    //5
	short c;//6-7 2
	short d;//8-9 2
	//10-11
}AA_t;
//12个字节
int main()
{
	printf("%d\n", sizeof(AA_t)); //12
	return 0;
}

#include <stddef.h>
struct s
{
	char c;
	int i;
	double d;
};
int main()//计算成员相对于结构体的偏移量
{
	// offsetof();
	printf("%d\n", offsetof(struct s, c));//0
	printf("%d\n", offsetof(struct s, i));//4
	printf("%d\n", offsetof(struct s, d));//8
	return 0;
}

//位段-二进制位
struct S
{
	int a : 2;
	int b : 5;
	int c : 18;
	int d : 30;
};
// 47bit - 6个字节 * 8 = 48bit
int main()
{
	struct S s;
	printf("%d\n", sizeof(s)); //8个字节
	return 0;
}

int main()//位段
{
	unsigned char puc[4];
	struct tagPIM
	{
		unsigned char ucPim1;
		unsigned char ucData0 : 1;
		unsigned char ucData1 : 2;
		unsigned char ucData2 : 3;
	}*pstPimData;
	pstPimData = (struct tagPIM*)puc;
	memset(puc, 0, 4);
	pstPimData->ucPim1 = 2;//010 ->010
	pstPimData->ucData0 = 3;//011 ->1
	pstPimData->ucData1 = 4;//100 ->00
	pstPimData->ucData2 = 5;//101 ->101
	printf("%02x %02x %02x %02x\n", puc[0], puc[1], puc[2], puc[3]);//0000 0010 0010 1001 0000 0000
	return 0;                                                       // 0    2    2     9   0    0
}

位段的跨平台问题
1.int 位段被当成有符号数还是无符号数是不确定的。
2位段中最大位的数目不能确定。(.16位机器最大16，32位机器最大32，写成27，在16位机器会出问题。
3.位段中的成员在内存中从左向布分配, 还是从右向左分配标准尚未定义。
4.当一个结构包含两个位段，第二个位段成员比较大，无法容纳于第一个位段剩余的位时, 是舍弃剩余的位还是利用, 这是不确定的。
总结 :
跟结构相比，位段可以达到同样的效果，但是可以很好的节省空间，但是有跨平台的问题存在。


//枚举类型
enum SeX
{
	//枚举的可能取值--常量 
	MALE = 2,
    FEMALE = 4, 
	SECRET = 8
};
enum coiar
{
	RED, //0
	GREEN,//1
	BLUE//2
};
int main()
{
	//enum Sex s = MALE;
	//enum Color c =BLUE;
	printf("%d %d %d\n", RED, GREEN, BLUE);
	printf("%d %d %d\n", MALE, FEMALE, SECRET);
}

枚举的优点
1.增加代码的可读性和可维护性
2.和#define定义的标识符比较枚举有类型检查，更加严谨。
3.防止了命名污染（封装)
4.便于调试
5.使用方便，一次可以定义多个常量

//联合体（共用体）
union Un
{
	char c;//1
	int i;// 4
};
//5个学节
int main()//不可同时调用c和i
{
	union Un u;
	printf("%d\n", sizeof(u));
	printf("%p\n", &u);
	printf("%p\n", &(u.c));
	printf("%p\n", &(u.i));
	return 0;
}

union Un
{
	int a;//4 8 4
	char arr[5];//5  1 8 1
};
int main()//计算联合内存大小
{
	union Un u;
	printf("%d\n", sizeof(u));//8
	return 0;
}

联合大小的计算
联合的大小至少是最大成员的大小。
当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍。
