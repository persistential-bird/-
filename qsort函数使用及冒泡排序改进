#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int cmp_int(const void*e1, const void*e2)
{
	return *(int*)e1 - *(int*)e2;
}
void test1()  //整型数据排序
{
	int arr[] = { 9,8,7,6,5,4,3,2,1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	int j = 0;
	for (j = 0;j < sz;j++)
	{
		printf("%d ", arr[j]);
	}
}
int cmp_float(const void*e1, const void*e2)
{
	//if (*(float*)e1 == *(float*)e2)
	//	return 0;
	//else if (*(float*)e1 > *(float*)e2)
	//	return 1;
	//else
	//	return -1;
	return ((int)(*(float*)e1 - *(float*)e2));
}
void test2()  //双精度浮点型数据排序
{
	float f[] = { 9.0,8.0,7.0,6.0,5.0,4.0,3.0,2.0,1.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f, sz, sizeof(f[0]), cmp_float);
	int j = 0;
	for (j = 0;j < sz;j++)
	{
		printf("%f ", f[j]);
	}
}
struct Stu
{
	char name[20];
	int age;
};
int cmp_stu_by_age(const void*e1, const void*e2)
{
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}
int cmp_stu_by_name(const void*e1, const void*e2)
{
	//比较名字就是比较字符串，不能直接用<=>比较，需用strcmp函数
	return strcmp((((struct Stu*)e1)->name), (((struct Stu*)e2)->name));
}
void test3()  //按结构体内部部分数据排序
{
	struct Stu s[3] = { { "zhangsan",20 },{ "lisi",30 },{ "wangwu",10 } };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_stu_by_age);
	/*qsort(s, sz, sizeof(s[0]), cmp_stu_by_name);*/
	int j = 0;
	for (j = 0;j < sz;j++)
	{
		printf("%d ", s[j].age);
	}
	//int j = 0;
	//for (j = 0;j < sz;j++)
	//{
	//	printf("%s ", s[j].name);
	//}
}
void swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0;i < width;i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}
void buble_sort(void*base, int sz, int width, int(*cmp)(void*e1, void*e2))  //冒泡排序改进版（万金油）
{
	int i = 0;
	//趟数
	for (i = 0;i < sz - 1;i++)
	{
		//每一趟的比较对数
		int j = 0;
		for (j = 0;j < sz - 1 - i;j++)
		{
			//两个元素的比较
			if (cmp((char*)base + j * width, (char*)base + (j + 1)*width) > 0)
			{
				//交换
				swap((char*)base + j * width, (char*)base + (j + 1)*width, width);
			}
		}
	}
}
void test4()   //冒泡排序法排序整型数据
{
	int arr[] = { 9,8,7,6,5,4,3,2,1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	buble_sort(arr, sz, sizeof(arr[0]), cmp_int);
	int j = 0;
	for (j = 0;j < sz;j++)
	{
		printf("%d ", arr[j]);
	}
}
void test5()  //冒泡排序法排序结构体内部数据
{
	struct Stu s[3] = { { "zhangsan",20 },{ "lisi",30 },{ "wangwu",10 } };
	int sz = sizeof(s) / sizeof(s[0]);
	buble_sort(s, sz, sizeof(s[0]), cmp_stu_by_age);
	int j = 0;
	for (j = 0;j < sz;j++)
	{
		printf("%d ", s[j].age);
	}
	//buble_sort(s, sz, sizeof(s[0]), cmp_stu_by_name);
	//int j = 0;
	//for (j = 0;j < sz;j++)
	//{
	//	printf("%s ", s[j].name);
	//}
}
int main()
{
	//test1();
	//test2();
	//test3();
	//test4();
	test5();
	return 0;
}
