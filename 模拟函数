#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <assert.h>
//void my_strcpy(char* dest, char* src)
//{
	while (*src != '\0')
	{
		*dest = *src;
		src++;
		dest++;
	}
	*dest = *src;
//}
char* my_strcpy(char* dest,const char* src)//优化后
{
	char* ret = dest;
	assert(dest != '\0');//断言
	assert(src != '\0');
	//把src指向的字符拷贝到dest指向的空间，包含'\0'字符
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}
int main()   //模拟strcpy函数
{
	char arr1[] = "###############";
	char arr2[] = "zhao";
	printf("%s\n", my_strcpy(arr1, arr2));
	return 0;
}



int my_strlen(char* str)
{
	char* start = str;
	char* end = str;
	while (*end != '\0')
	{
		end++;
	}
	return end - start;
}
int main()        //模拟实现strlen函数  指针的方法
{
	char arr[] = "zhao";
	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;
}
//#include <stdio.h>           //��������ʱ�����������������ַ�������
//#include <string.h>
//int my_strlen(char* str)
//{
//	if (*str != '\0')
//		return 1 + my_strlen(str + 1);
//	else
//		return 0;
//}
//int main()
//{
//	char arr[] = "zhaokai";
//	//int len = strlen(arr);
//	//printf("len=%d", len);
//	int len = my_strlen(arr);
//	printf("len=%d", len);
//	return 0;
//}

char* my_strcat(char* dest, const char* src)
{
	char* ret = dest;
	assert(dest);
	assert(src != NULL);
	//1.找到目的字符串的'\0'
	while (*dest != '\0')
	{
		dest++;
	}
	//2.追加
	while (*dest++ = *src++)
	{
	    ;
	}
	return ret;
}
int main()//模拟使用strcat函数
{
	char arr1[30] = "hello";
	char arr2[] = "world";
	my_strcat(arr1, arr2);
	printf("%s\n", arr1);
	return 0;
}

int my_strcmp(const char* str1, const char* str2)
{
	assert(str1 && str2);
	//比较
	while (*str1 == *str2)
	{
		if (*str1 == '\0')
		{
			return 0;//相等
		}
		str1++;
		str2++;
	}
	// //return (*str1 - *str2);
	if (*str1 > *str2)
	{
		return 1;//大于
	}
	else
	{
		return -1;//小于
	}
}
int main()//模拟使用strcmp函数
{
	char* p1 = "abcdef";
	char* p2 = "abcqwe";
	int ret = my_strcmp(p1, p2);
	printf("ret=%d\n", ret);
	return 0;
}

char* my_strstr(const char* p1, const char* p2)
{
	assert(p1 && p2);
	char *s1 = NULL;
	char *s2 = NULL;
	char *cur = (char*)p1;
	if (*p2 == '10')
	{
		return (char*)p1;
	}
	while (*cur) 
	{
		s1 = cur;
		s2 = (char*)p2;
		while (*s1 && *s2 && (*s1 == *s2))
		{
			s1++;
			s2++;
		}
		if (*s2 == '\0')
		{
			return cur;//找到子串
		}
	    cur++;
    }
    return NULL;//找不到子串
}
int main()//模拟使用strstr函数
{
	char *p1 = "abcdef";
	char *p2 = "def";
	char* ret = my_strstr(p1, p2);
	if (ret == NULL)
	{
		printf("子串不存在\n");
	}
	else 
	{
		printf("%s\n", ret);
	}
	return 0;
}

int main()//使用strtok函数
{
	//char arr[I]="zpw@bitedu.tech";// char*p ="@.";
	//点分十进制的表示方式
	char arr[] = "192.168.31.121";
	char*p = ".";
	//zpw\ebitedu.tech
	char buf[1024] = { 0 };
	strcpy(buf,arr);
	//切割buf中的字符串
	char* ret = NULL;
	for (ret = strtok(arr,p);ret != NULL; ret = strtok(NULL, p))
	{
		printf("%s\n", ret); 
	}
}

int main()//使用字符分类函数及字符转换
{
	//char ch = '2';
	// int ret = islower(ch);
	//int ret = isdigit(ch);
	//printf("%dNn", ret);

	// char ch = tolower('q');
	// char ch = toupper('q');
	//putchar(ch);
	char arr[] = "I Am A Student";
	int i = 0;
	while (arr[i])
	{
		if (isupper(arr[i]))
		{
			arr[i] = tolower(arr[i]);
        }
        i++;
    }
    printf("%s\n", arr);
    return 0;
}


struct s 
{
	char name[20];
	int age;
};
void* my_memcpy(void* dest, const void* src, int num)
{
	void* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
	while (num--)
	{
		*(char*)dest = *(char*)src;
		++(char*)dest;
		++(char*)src;
	}
	return ret;

}
int main()//模拟使用memcpy函数
{
    int arr1[] = { 1,2,3,4,5 };
    int arr2[5] = { 0 };
    int i = 0;
    struct s arr3[] = { {"张三",20 }, {"李四",30} };
    struct s arr4[3] = {0};
    my_memcpy(arr4,arr3, sizeof(arr3));
    for (i = 0;i < 3;i++)
    {
	printf("%s\n", arr4[i].name);
    }
    //memcpy(arr2,arr1, sizeof(arr1));
    //char* dest,const char*src
    //strcpy(arr2, arr1);
	return 0;
}

//c语言标准:
//memcpy 只要处理不重叠的内存拷贝就可以 
// memmove 处理重善内存的拷贝 

void* my_memmove(void* dest, void* src, size_t num)
{
	void* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
	if (dest < src)
	{
	    //前->后
		while (num--)
		{
			*(char*)dest = *(char*)src;
			++(char*)dest;
			++(char*)src;
		}
	}
	else 
	{
		//后->前
		while (num--) 
		{
			*((char*)dest + num) = *((char*)src + num);
		}
	}
	return ret;
}
int main()//模拟使用memmove函数
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	//my _memcpy(arr+2,arr,20);
	my_memmove(arr + 2, arr, 20);//处理内存重叠的情况的
	//memcpy(arr + 2, arr, 20);
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

int main()//使用memcpy函数
{
    //01 00 ee 00 02 00 00 00 03 00 00 00 ...
    //01 0e 0e 00 02 00 08 00 05 00 00 00 ...
    int arr1[] = { 1,2,3,4,5};
    int arr2[] = { 1,2,5,4,3 };
    int ret = memcmp(arr1, arr2,9);
    printf("%d\n", ret);
    return 0;
}

//memset -内存设置
int main()//使用memset函数
{
	//char arr[10] ="";
	//memset(arr, '#',10);
	int arr[10] ={ 0 };//40个字节
	int i = 0;
	//01 01 01 01 01 01 01 01 01 01 00 0e 00 00 00 ...
	memset(arr, 1,10);
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
